name: Build and Deploy to ECS Fargate

on:
  push:
    branches:
      - master

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: stg-eshop-ecr

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout source
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f src/Web/Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Upload Terraform modules as artefact
      uses: actions/upload-artifact@v2
      with:
        name: eshop-iac-package
        path: terraform/
        
  deploy:
    name: Deploy Staging
    runs-on: ubuntu-latest
    environment: staging
    needs: [build]
    env:
      ENV_PREFIX: stg
      
    steps:
    - name: Download Terraform modules artefact
      uses: actions/download-artifact@v2
      with:
        name: eshop-iac-package
        path: terraform
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
    - name: Terraform Init
      run: terraform -chdir=terraform/eshop-web init -backend-config=backend
    - name: Terraform Fmt
      run: terraform -chdir=terraform/eshop-web fmt 
    - name: Terraform Validate
      run: terraform -chdir=terraform/eshop-web validate
    - name: Terraform Apply
      run: terraform -chdir=terraform/eshop-web apply -var env_prefix=${{env.ENV_PREFIX }} -var build_number=${{ github.sha }} -auto-approve
    - name: Output App Url
      run: |
        cluster_arn=`terraform -chdir=terraform/eshop-web output -raw cluster_arn`
        echo "Cluster ARN: $cluster_arn"
        service_name=`terraform -chdir=terraform/eshop-web output -raw service_name`
        echo "Service Name: $service_name"
        task_arn=$(aws ecs list-tasks --cluster $cluster_arn --service-name $service_name | jq -r ".taskArns[0]")
        echo "Task Id: $task_arn"
        task_ni_id=$(aws ecs describe-tasks --cluster $cluster_arn --tasks $task_arn --output json | jq -r '.tasks[0].attachments[0].details[] | select(.name == "networkInterfaceId") | .value')
        task_pubip=$(aws ec2 describe-network-interfaces --network-interface-ids $test | jq -r ".NetworkInterfaces[0].Association.PublicIp")
        echo "http://$task_pubip"
